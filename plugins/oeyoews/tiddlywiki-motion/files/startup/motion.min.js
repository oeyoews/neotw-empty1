(function () {
  'use strict';
  Object.defineProperty(exports, '__esModule', { value: true });
  exports.startup =
    exports.synchronous =
    exports.after =
    exports.platforms =
      void 0;
  exports.platforms = ['browser'];
  exports.after = ['render'];
  exports.synchronous = true;
  class Motion {
    constructor() {
      this.prefix = '$:/plugins/oeyoews/motion';
      this.selectedStateTiddlerTitle =
        '$:/state/plugins/oeyoews/motion/selected';
    }
    init() {
      this.navigatorWidget = this.getNavigatorWidget($tw.rootWidget);
      $tw.hooks.addHook(
        'th-closing-tiddler',
        this.handleClosingTiddler.bind(this),
      );
      const shortcuts = {
        ShowHelp: () => {
          howler('click.mp3');
          this.navigatorWidget.dispatchEvent({
            type: 'tm-modal',
            param: this.getPluginTitle('Help'),
          });
          return false;
        },
        Fullscreen: () => {
          howler('click.mp3');
          this.navigatorWidget.dispatchEvent({ type: 'tm-full-screen' });
          return false;
        },
        FocusSearch: () => {
          this.navigatorWidget.dispatchEvent({
            type: 'tm-focus-selector',
            param: '.nc-topbar-wrapper input',
          });
          return false;
        },
        CreateNewTiddler: () => {
          // howler('sounds/bite.mp3');
          this.navigatorWidget.dispatchEvent({ type: 'tm-new-tiddler' });
          return false;
        },
        DeleteTiddler: () => {
          howler('pop-down.mp3');
          let selectedTiddler =
            $tw.wiki.getTiddlerText(this.selectedStateTiddlerTitle) || '';
          if (!selectedTiddler) {
            return;
          }
          this.navigatorWidget.dispatchEvent({
            type: 'tm-delete-tiddler',
            param: selectedTiddler,
          });
          return false;
        },
        RefreshWiki: () => {
          // howler();
          this.navigatorWidget.dispatchEvent({
            type: 'tm-browser-refresh',
          });
          return false;
        },
        SaveWiki: () => {
          this.navigatorWidget.dispatchEvent({ type: 'tm-save-wiki' });
          return false;
        },
        SelectNextTiddler: () => {
          howler('click01.mp3');
          let selectedTiddler =
            $tw.wiki.getTiddlerText(this.selectedStateTiddlerTitle) || '';
          const storyList = this.navigatorWidget.story.getStoryList();
          if (!storyList.length) {
            return;
          }
          let currentTiddlerIndex = storyList.indexOf(selectedTiddler);
          let nextTiddlerIndex;
          if (currentTiddlerIndex < 0) {
            nextTiddlerIndex = 0;
          } else {
            nextTiddlerIndex = Math.min(
              currentTiddlerIndex + 1,
              storyList.length - 1,
            );
          }
          selectedTiddler = storyList[nextTiddlerIndex];
          $tw.wiki.addTiddler({
            title: this.selectedStateTiddlerTitle,
            text: selectedTiddler,
          });
          this.navigatorWidget.dispatchEvent({
            type: 'tm-navigate',
            navigateTo: selectedTiddler,
          });
          this.focusTiddler(selectedTiddler);
          return false;
        },
        SelectPreviousTiddler: () => {
          howler();
          let selectedTiddler =
            $tw.wiki.getTiddlerText(this.selectedStateTiddlerTitle) || '';
          const storyList = this.navigatorWidget.story.getStoryList();
          if (!storyList.length) {
            return;
          }
          let currentTiddlerIndex = storyList.indexOf(selectedTiddler);
          let nextTiddlerIndex;
          if (currentTiddlerIndex < 0) {
            nextTiddlerIndex = 0;
          } else {
            nextTiddlerIndex = Math.max(currentTiddlerIndex - 1, 0);
          }
          selectedTiddler = storyList[nextTiddlerIndex];
          $tw.wiki.addTiddler({
            title: this.selectedStateTiddlerTitle,
            text: selectedTiddler,
          });
          this.navigatorWidget.dispatchEvent({
            type: 'tm-navigate',
            navigateTo: selectedTiddler,
          });
          this.focusTiddler(selectedTiddler);
          return false;
        },
        GoToGettingStarted: () => {
          const gettingstarted = 'GettingStarted';
          this.navigatorWidget.dispatchEvent({
            type: 'tm-navigate',
            navigateTo: gettingstarted,
          });
          return false;
        },
        GoToPlugins: () => {
          this.navigatorWidget.dispatchEvent({
            type: 'tm-navigate',
            navigateTo: '$:/core/ui/ControlPanel/Plugins',
          });
          return false;
        },
        GoToSearch: () => {
          this.navigatorWidget.dispatchEvent({
            type: 'tm-navigate',
            navigateTo: '$:/AdvancedSearch',
          });
          return false;
        },
        GoToControlPanel: () => {
          const controlpanel = '$:/ControlPanel';
          this.navigatorWidget.dispatchEvent({
            type: 'tm-navigate',
            navigateTo: controlpanel,
          });
          return false;
        },
        GoToInbox: () => {
          const hasProjectify = $tw.wiki.getTiddler(
            '$:/plugins/nico/projectify',
          );
          const dashboard = '$:/plugins/nico/projectify/ui/dashboard/Dashboard';
          if (!hasProjectify) return;
          this.navigatorWidget.dispatchEvent({
            type: 'tm-navigate',
            navigateTo: dashboard,
          });
          this.focusTiddler(dashboard);
          return false;
        },
        GoToFirstTiddler: () => {
          howler();
          const storyList = this.navigatorWidget.story.getStoryList();
          if (!storyList.length) {
            return;
          }
          const selectedTiddler = storyList[0];
          $tw.wiki.addTiddler({
            title: this.selectedStateTiddlerTitle,
            text: selectedTiddler,
          });
          this.navigatorWidget.dispatchEvent({
            type: 'tm-navigate',
            navigateTo: selectedTiddler,
          });
          this.focusTiddler(selectedTiddler);
          return false;
        },
        GoToLastTiddler: () => {
          howler('click01.mp3');
          const storyList = this.navigatorWidget.story.getStoryList();
          if (!storyList.length) {
            return;
          }
          const selectedTiddler = storyList[storyList.length - 1];
          $tw.wiki.addTiddler({
            title: this.selectedStateTiddlerTitle,
            text: selectedTiddler,
          });
          this.navigatorWidget.dispatchEvent({
            type: 'tm-navigate',
            navigateTo: selectedTiddler,
          });
          this.focusTiddler(selectedTiddler);
          return false;
        },
        EditTiddler: () => {
          const selectedTiddler = $tw.wiki.getTiddlerText(
            this.selectedStateTiddlerTitle,
          );
          if (!selectedTiddler) {
            return;
          }
          this.navigatorWidget.dispatchEvent({
            type: 'tm-edit-tiddler',
            param: selectedTiddler,
          });
          return false;
        },
        CloseTiddler: () => {
          const selectedTiddler = $tw.wiki.getTiddlerText(
            this.selectedStateTiddlerTitle,
          );
          if (!selectedTiddler) {
            return;
          }
          this.navigatorWidget.dispatchEvent({
            type: 'tm-close-tiddler',
            param: selectedTiddler,
          });
          return false;
        },
        CloseAllTiddlers: () => {
          this.navigatorWidget.dispatchEvent({ type: 'tm-close-all-tiddlers' });
          return false;
        },
        TogglePalette: () => {
          const currentPalette = $tw.wiki.getTiddlerText('$:/palette');
          const notebookPalette =
            '$:/themes/nico/notebook/palettes/palette-beige';
          const githubDark = '$:/palettes/GithubDark';
          if (currentPalette == notebookPalette) {
            // dark
            $tw.wiki.setText('$:/palette', 'text', null, githubDark);
          }
          if (currentPalette == githubDark) {
            $tw.wiki.setText('$:/palette', 'text', null, notebookPalette);
          }
          return false;
        },
        ToggleTiddler: () => {
          const selectedTiddler = $tw.wiki.getTiddlerText(
            this.selectedStateTiddlerTitle,
          );
          if (!selectedTiddler) {
            return;
          }
          this.toggleTiddler(selectedTiddler);
          return false;
        },
        UnfoldTiddler: () => {
          const selectedTiddler = $tw.wiki.getTiddlerText(
            this.selectedStateTiddlerTitle,
          );
          if (!selectedTiddler) {
            return;
          }
          this.unfoldTiddler(selectedTiddler);
          return false;
        },
        FoldTiddler: () => {
          const selectedTiddler = $tw.wiki.getTiddlerText(
            this.selectedStateTiddlerTitle,
          );
          if (!selectedTiddler) {
            return;
          }
          this.foldTiddler(selectedTiddler);
          return false;
        },
        ToggleLayout: () => {
          this.toggleLayout();
          return false;
        },
        // toggle sidebar
        ToggleSidebar: () => {
          howler();
          this.toggleSidebar();
          return false;
        },
        ToggleAllTiddlers: () => {
          const storyList = this.navigatorWidget.story.getStoryList();
          for (const title of storyList) {
            this.toggleTiddler(title);
          }
          return false;
        },
        FoldAllTiddlers: () => {
          const storyList = this.navigatorWidget.story.getStoryList();
          for (const title of storyList) {
            this.foldTiddler(title);
          }
          return false;
        },
        UnfoldAllTiddlers: () => {
          const storyList = this.navigatorWidget.story.getStoryList();
          for (const title of storyList) {
            this.unfoldTiddler(title);
          }
          return false;
        },
        // TODO should use keypress, not keydown
        Dismiss: () => {
          // Close help modal if it's open.
          // HACK: Close the modal by clicking the button to dispatch the internal
          // tm-close-tiddler message.
          const button = document.querySelector('.tc-modal-footer button');
          if (button) {
            button.click();
            howler();
          }
          // Deselect tiddler.
          $tw.wiki.deleteTiddler(this.selectedStateTiddlerTitle);
        },
      };
      for (const [name, handler] of Object.entries(shortcuts)) {
        const shortcut = this.getSetting(`Shortcuts/${name}/Key`);
        Mousetrap.bind(shortcut, handler);
      }
    } // int end
    /* some aid method */
    getSetting(name) {
      return $tw.wiki.getTiddlerText(this.getPluginTitle(`config/${name}`));
    }
    getPluginTitle(title) {
      return `${this.prefix}/${title}`;
    }
    handleClosingTiddler(event) {
      const selectedTiddler = $tw.wiki.getTiddlerText(
        this.selectedStateTiddlerTitle,
      );
      if (event.param == selectedTiddler) {
        $tw.wiki.deleteTiddler(this.selectedStateTiddlerTitle);
      }
      return event;
    }
    toggleTiddler(title) {
      if ($tw.wiki.getTiddlerText(`$:/state/folded/${title}`) == 'hide') {
        this.unfoldTiddler(title);
      } else {
        this.foldTiddler(title);
      }
    }
    foldTiddler(title) {
      $tw.wiki.setText(`$:/state/folded/${title}`, 'text', null, 'hide');
    }
    unfoldTiddler(title) {
      $tw.wiki.deleteTiddler(`$:/state/folded/${title}`);
    }
    toggleLayout() {
      const layout = $tw.wiki.getTiddlerText('$:/layout');
      const vanillaLayout = '$:/core/ui/PageTemplate';
      const targetLayout = '$:/plugins/oeyoews/neotw/modules/landing/layout';
      if (layout == vanillaLayout) {
        $tw.wiki.setText('$:/layout', 'text', null, targetLayout);
      }
      if (layout == targetLayout) {
        $tw.wiki.setText('$:/layout', 'text', null, vanillaLayout);
      }
    }
    // toggle notebook-sidebar
    toggleSidebar() {
      if ($tw.wiki.getTiddlerText(`$:/state/notebook-sidebar`) == 'yes') {
        $tw.wiki.setText(`$:/state/notebook-sidebar`, 'text', null, 'no');
      } else {
        $tw.wiki.setText(`$:/state/notebook-sidebar`, 'text', null, 'yes');
        $tw.wiki.setText(
          `$:/state/notebook-sidebar-section`,
          'text',
          null,
          '$:/core/ui/SideBar/Recent',
        );
      }
    }
    getNavigatorWidget(widget) {
      const child = widget.children[0];
      if (child.parseTreeNode.type == 'navigator') {
        return child;
      }
      return this.getNavigatorWidget(child);
    }
    getTiddlerElement(title) {
      return document.querySelector(
        `[data-tiddler-title="${CSS.escape(title)}"]`,
      );
    }
    focusTiddler(title) {
      const el = this.getTiddlerElement(title);
      const focusSelected = this.getSetting('FocusSelected');
      if (el && focusSelected === 'true') {
        el.tabIndex = -1;
        el.focus();
      }
    }
  }
  function startup() {
    $tw.modules.execute(
      '$:/plugins/oeyoews/motion/modules/library/mousetrap.min.js',
    );
    const motion = new Motion();
    // just init function ???
    motion.init();
    window._motion = motion;
  }
  exports.startup = startup;
})();
